{"version":3,"file":"index.js","sources":["../src/components/Plock.js"],"sourcesContent":["import * as React from \"react\";\n\n/**\n * Configuration for Plock.\n * This is a map of breakpoints to the number of columns to use for that breakpoint.\n *\n * const breakpoints = [\n *   { size: 640, columns: 1 },\n *   { size: 768, columns: 2 },\n *   { size: 1024, columns: 3 },\n *   { size: 1280, columns: 4 },\n * ];\n */\n\nexport function useWindowWidth({ debounceMs }) {\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const handleResize = useDebounce(\n    () => setWidth(window.innerWidth),\n    debounceMs\n  );\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [handleResize]);\n\n  return width;\n}\n\nexport function useDebounce(fn, ms) {\n  let timeout = null;\n\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(args), ms);\n  };\n}\n\nexport const Plock = React.forwardRef(\n  (\n    {\n      as: Comp = \"div\",\n      children,\n      className,\n      style,\n      gap = 10,\n      debounce = 200,\n\n      /**\n       * TODO:\n       * This will be renamed to breakpoints in a future major release!\n       */\n      nColumns: breakpoints = 3,\n    },\n    forwardedRef\n  ) => {\n    const width = useWindowWidth({ debounceMs: debounce });\n    const [columns, setColumns] = React.useState([]);\n\n    React.useLayoutEffect(() => {\n      const first = (breakpoints) => {\n        return breakpoints?.[0];\n      };\n\n      const last = (breakpoints) => {\n        return breakpoints?.[breakpoints.length - 1];\n      };\n\n      const sorted = (breakpoints) => {\n        return breakpoints.sort((a, b) => a.size - b.size);\n      };\n\n      const contained = (breakpoints, width) => {\n        return breakpoints.filter((el) => el.size <= width);\n      };\n\n      const isNumber = (element) => typeof element === \"number\";\n\n      const breakpoint = isNumber(breakpoints)\n        ? { columns: breakpoints }\n        : last(sorted(contained(breakpoints, width))) ??\n          first(sorted(breakpoints));\n\n      const columnsForBreakpoint = Array.from(\n        { length: breakpoint.columns },\n        (e) => []\n      );\n\n      React.Children.forEach(children, (child, index) => {\n        const key = `item-${index}`;\n        const cloned = React.cloneElement(child, {\n          ...child.props,\n          key: key,\n        });\n\n        columnsForBreakpoint[index % columnsForBreakpoint.length].push(cloned);\n      });\n\n      setColumns(columnsForBreakpoint);\n    }, [children, breakpoints, width]);\n\n    const defaultStyles = {\n      mainGrid: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${columns.length}, 1fr)`,\n        columnGap: gap,\n        alignItems: \"start\",\n      },\n      columnGrid: {\n        display: \"grid\",\n        gridTemplateColumns: \"100%\",\n        rowGap: gap,\n      },\n    };\n\n    return (\n      <Comp\n        ref={forwardedRef}\n        data-testid=\"plock-container\"\n        className={className}\n        style={{ style, ...defaultStyles.mainGrid }}\n      >\n        {columns.map((column, index) => {\n          return (\n            <div\n              data-testid=\"plock-column\"\n              style={defaultStyles.columnGrid}\n              key={index}\n            >\n              {column}\n            </div>\n          );\n        })}\n      </Comp>\n    );\n  }\n);\n"],"names":["useWindowWidth","debounceMs","width","setWidth","React","useState","window","innerWidth","handleResize","fn","ms","timeout","args","clearTimeout","setTimeout","useDebounce","useEffect","addEventListener","removeEventListener","Plock","forwardRef","as","Comp","children","className","style","gap","debounce","nColumns","breakpoints","forwardedRef","columns","setColumns","useLayoutEffect","sorted","sort","a","b","size","breakpoint","length","last","filter","el","contained","first","columnsForBreakpoint","Array","from","e","Children","forEach","child","index","key","cloned","cloneElement","props","push","defaultStyles","mainGrid","display","gridTemplateColumns","columnGap","alignItems","columnGrid","rowGap","ref","map","column"],"mappings":"6XAcO,SAASA,GAAeC,WAAEA,UACxBC,EAAOC,GAAYC,EAAMC,SAASC,OAAOC,YAC1CC,EAaD,SAAqBC,EAAIC,OAC1BC,EAAU,WAEP,IAAIC,KACTC,aAAaF,GACbA,EAAUG,YAAW,IAAML,EAAGG,IAAOF,IAlBlBK,EACnB,IAAMZ,EAASG,OAAOC,aACtBN,UAGFG,EAAMY,WAAU,KACdV,OAAOW,iBAAiB,SAAUT,GAC3B,IAAMF,OAAOY,oBAAoB,SAAUV,KACjD,CAACA,IAEGN,QAYIiB,EAAQf,EAAMgB,YACzB,EAEIC,GAAIC,EAAO,MACXC,SAAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,IAAAA,EAAM,GACNC,SAAAA,EAAW,IAMXC,SAAUC,EAAc,GAE1BC,WAEM5B,EAAQF,EAAe,CAAEC,WAAY0B,KACpCI,EAASC,GAAc5B,EAAMC,SAAS,IAE7CD,EAAM6B,iBAAgB,WASdC,EAAUL,GACPA,EAAYM,MAAK,CAACC,EAAGC,IAAMD,EAAEE,KAAOD,EAAEC,OASzCC,EAF2C,iBAErBV,EACxB,CAAEE,QAASF,GAfDA,CAAAA,GACLA,IAAcA,EAAYW,OAAS,GAexCC,CAAKP,EARS,EAACL,EAAa3B,IACvB2B,EAAYa,QAAQC,GAAOA,EAAGL,MAAQpC,IAO/B0C,CAAUf,EAAa3B,MApBxB2B,CAAAA,GACNA,IAAc,GAoBnBgB,CAAMX,EAAOL,UAEXiB,EAAuBC,MAAMC,KACjC,CAAER,OAAQD,EAAWR,UACpBkB,GAAM,KAGT7C,EAAM8C,SAASC,QAAQ5B,GAAU,CAAC6B,EAAOC,WACjCC,EAAO,QAAOD,IACdE,EAASnD,EAAMoD,aAAaJ,EAAO,IACpCA,EAAMK,MACTH,IAAKA,IAGPR,EAAqBO,EAAQP,EAAqBN,QAAQkB,KAAKH,MAGjEvB,EAAWc,KACV,CAACvB,EAAUM,EAAa3B,UAErByD,EAAgB,CACpBC,SAAU,CACRC,QAAS,OACTC,oBAAsB,UAAS/B,EAAQS,eACvCuB,UAAWrC,EACXsC,WAAY,SAEdC,WAAY,CACVJ,QAAS,OACTC,oBAAqB,OACrBI,OAAQxC,WAKVtB,gBAACkB,GACC6C,IAAKrC,gBACO,kBACZN,UAAWA,EACXC,MAAO,CAAEA,MAAAA,KAAUkC,EAAcC,WAEhC7B,EAAQqC,KAAI,CAACC,EAAQhB,IAElBjD,qCACc,eACZqB,MAAOkC,EAAcM,WACrBX,IAAKD,GAEJgB"}